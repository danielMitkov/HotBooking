// <auto-generated />
using System;
using HotBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotBooking.Data.Migrations
{
    [DbContext(typeof(HotBookingDbContext))]
    [Migration("20240410091519_DataSeeded")]
    partial class DataSeeded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotBooking.Data.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21af0cf5-3fb0-4251-8be0-ade4580e80a4",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELLAa0kRu6XFejM7+8Gc0nYdQWns4U8aDISn5TQICPk/voSqBq7KYmPFvLS6jb4csg==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("70f28475-14a6-4e75-aa86-d74b4cb49f2f"),
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "644d7295-6727-4679-a797-a0e80638639d",
                            Email = "two@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "two@mail.com",
                            NormalizedUserName = "two@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEC9Y6LXjzm6ssGhYo7KTvri9gZ8YAgcQTq8de3m7jcp2OSQS16VGdB5IEyIg8ti/rA==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("bf3134a9-66cb-4d8b-9706-3917cb3553bb"),
                            TwoFactorEnabled = false,
                            UserName = "two@mail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caec14c5-c2e8-4918-9343-b76a9d8275ff",
                            Email = "manager@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "manager@mail.com",
                            NormalizedUserName = "manager@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKgsoNpbLWou3xtPmPpmaw+oul4FylmrP+ZOkk1FhcLRMlRaJa3eFZpV8oipq6jUpg==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("c5a5c71f-fcfd-4480-8527-ac4ae3cfc5b4"),
                            TwoFactorEnabled = false,
                            UserName = "manager@mail.com"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdultsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdultsCount = 2,
                            CheckIn = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("553d182d-e9cd-4bad-baf5-57a811f9ab54"),
                            RoomId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdultsCount = 3,
                            CheckIn = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("8249b34a-1495-4a20-98aa-e6b810b284bd"),
                            RoomId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AdultsCount = 1,
                            CheckIn = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("80627a12-2a3d-4bec-8776-d7e8ac2f7dba"),
                            RoomId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            AdultsCount = 4,
                            CheckIn = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("eeaa9011-718e-4139-ac07-c05728d5ee31"),
                            RoomId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            AdultsCount = 2,
                            CheckIn = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("b328f0b3-205c-4c71-a3aa-4079088ca314"),
                            RoomId = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            AdultsCount = 3,
                            CheckIn = new DateTime(2023, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 3,
                            IsActive = true,
                            PublicId = new Guid("8ca62b69-83b6-4ff7-9c99-724d297ad478"),
                            RoomId = 6,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SvgTag")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Spa",
                            PublicId = new Guid("90620688-bbc1-4074-8271-131fef7f962d"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Parking",
                            PublicId = new Guid("c34fa9d0-0465-477d-8fe3-a6272b79f368"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "WiFi",
                            PublicId = new Guid("94fc2542-f882-4654-85da-e40c6803cdc2"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Restaurant",
                            PublicId = new Guid("decc6830-41d5-4811-811d-ab7ea0fddb54"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Fitness",
                            PublicId = new Guid("db38eb92-b115-4aac-bac0-70dc4206f3a0"),
                            SvgTag = ""
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SvgTag")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "TV",
                            PublicId = new Guid("746510b3-e883-469e-8066-952b52a772c6"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Refrigerator",
                            PublicId = new Guid("7e1d4615-90cf-4afa-b22a-73a300ce2d9b"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Hairdryer",
                            PublicId = new Guid("04f8bb85-9124-4d3d-b772-fd696b7cc4e8"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Towels",
                            PublicId = new Guid("74bbbd57-42a3-4a10-b29c-1af7ed2672f4"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Slippers",
                            PublicId = new Guid("81b5ff60-6fb1-4124-8434-d6aef69efb3a"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Name = "Bathtub",
                            PublicId = new Guid("29c9dede-4b99-4dbd-a921-c46ef7c3dd99"),
                            SvgTag = ""
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "London",
                            CountryName = "United Kingdom",
                            Description = "Less than a 5-minute walk from London Paddington Station and Hyde Park, this boutique hotel offers elegant rooms with free internet and satellite TV.",
                            HotelName = "The Chilworth London Paddington",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("39bb8873-8c1c-4eb6-b0ea-1ca7d9c47a68"),
                            StarRating = 5,
                            StreetAddress = "Westminster Borough"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Bansko",
                            CountryName = "Bulgaria",
                            Description = "Get your trip off to a great start with a stay at this property, which offers free Wi-Fi in all rooms. Conveniently situated in the Bansko part of Bansko, this property puts you close to attractions and interesting dining options. Rated with 5 stars, this high-quality property provides guests with access to massage, restaurant and hot tub on-site.",
                            HotelName = "Kempinski Hotel Grand Arena Bansko",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("9b10e59f-eca1-4a1b-af2a-edf065e6207a"),
                            StarRating = 4,
                            StreetAddress = "#96 Pirin Street"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "London",
                            CountryName = "United Kingdom",
                            Description = "Welcoming guests since 1909, the Strand Palace Hotel is located in London’s West End within just 2297 feet of the Adelphi and the Vaudeville theaters.",
                            HotelName = "Strand Palace Hotel",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("d8659e6e-f7ea-45b2-89fe-137f7f384b19"),
                            StarRating = 4,
                            StreetAddress = "Westminster Borough"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelFacility", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.HasKey("HotelId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("HotelsFacilities");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 2
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 1
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 5
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 2
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 4
                        },
                        new
                        {
                            HotelId = 3,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 3,
                            FacilityId = 2
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("HotelImageUrls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("5f7ef972-9824-46ae-b1b9-19f17b4270c1"),
                            Url = "https://www.w3schools.com/html/pic_trulli.jpg"
                        },
                        new
                        {
                            Id = 2,
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("747abad5-7ae1-445e-9c75-16658e9c1270"),
                            Url = "https://images.pexels.com/photos/258154/pexels-photo-258154.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"
                        },
                        new
                        {
                            Id = 3,
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("093f8cdd-aabe-480d-a6b9-0a0c3e4dcb02"),
                            Url = "https://pix8.agoda.net/hotelImages/182146/-1/112f1fa0f38baf10800569462deb46cd.jpg"
                        },
                        new
                        {
                            Id = 4,
                            HotelId = 3,
                            IsActive = true,
                            PublicId = new Guid("bd57b735-eafd-4583-a33d-3482dbc22e36"),
                            Url = "https://cf.bstatic.com/xdata/images/hotel/max1024x768/260560238.jpg?k=1d14eb111d6a58d373d4139792c8c0545ec7014527bab0c00a98945e8df46879&o=&hp=1"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            PhoneNumber = "08812345678",
                            PublicId = new Guid("ae83eaf2-d337-42f0-bc04-eb213d4767db"),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RatingScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingId = 1,
                            Comment = "I love this product! It's exactly what I needed.",
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("da080a4b-d9f0-411c-921e-8bfed97580a8"),
                            RatingScore = 5m,
                            ReviewedOn = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Excellent Product",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingId = 2,
                            Comment = "The product was okay, but could be better.",
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("39c2f952-4347-4842-bd62-6e56a7714c5a"),
                            RatingScore = 3m,
                            ReviewedOn = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Average Experience",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookingId = 3,
                            Comment = "I was very disappointed with this product.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("60d6f693-ee97-4804-a8b0-ffdef450d2df"),
                            RatingScore = 1m,
                            ReviewedOn = new DateTime(2023, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Poor Quality",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookingId = 4,
                            Comment = "I got my money's worth with this product.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("e8244d3d-04a2-45c2-a260-0d43273d1ff0"),
                            RatingScore = 4m,
                            ReviewedOn = new DateTime(2023, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Good Value",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookingId = 5,
                            Comment = "This product is amazing! Highly recommended.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("2c8be67b-ef71-4861-a1e6-1e294c42de7c"),
                            RatingScore = 5m,
                            ReviewedOn = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Best Product Ever",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            BookingId = 6,
                            Comment = "Great room and service overall!",
                            HotelId = 3,
                            IsActive = true,
                            PublicId = new Guid("a37535e6-3c84-42f9-9c51-e8a5b6c72694"),
                            RatingScore = 4.5m,
                            ReviewedOn = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Satisfactory",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedsCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomSizeSquareMeters")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BedsCount = 2,
                            Description = "A comfortable room for a relaxing stay.",
                            HotelId = 1,
                            IsActive = true,
                            PricePerNight = 75.50m,
                            PublicId = new Guid("964713d2-79c9-4527-8a63-20a70fecc865"),
                            RoomSizeSquareMeters = 25,
                            Title = "Cozy Retreat"
                        },
                        new
                        {
                            Id = 2,
                            BedsCount = 1,
                            Description = "Luxurious suite with modern amenities.",
                            HotelId = 1,
                            IsActive = true,
                            PricePerNight = 120.75m,
                            PublicId = new Guid("4a1baf6b-569a-441c-a0ce-afe3b9304608"),
                            RoomSizeSquareMeters = 40,
                            Title = "Executive Suite"
                        },
                        new
                        {
                            Id = 3,
                            BedsCount = 3,
                            Description = "Spacious room suitable for families.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 95.25m,
                            PublicId = new Guid("5694eeec-4b8c-4c6f-908d-e0e433291c7e"),
                            RoomSizeSquareMeters = 35,
                            Title = "Family Getaway"
                        },
                        new
                        {
                            Id = 4,
                            BedsCount = 1,
                            Description = "Enjoy breathtaking views of the ocean.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 110.00m,
                            PublicId = new Guid("18bd4d6c-f130-46c8-8a0f-f3797312ed6a"),
                            RoomSizeSquareMeters = 30,
                            Title = "Ocean View Paradise"
                        },
                        new
                        {
                            Id = 5,
                            BedsCount = 2,
                            Description = "Escape to a cozy lodge in the mountains.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 85.80m,
                            PublicId = new Guid("e7ea351b-3659-4df7-a3d9-8c6f37227314"),
                            RoomSizeSquareMeters = 28,
                            Title = "Mountain Lodge"
                        },
                        new
                        {
                            Id = 6,
                            BedsCount = 3,
                            Description = "Luxurious room with a panoramic view.",
                            HotelId = 3,
                            IsActive = true,
                            PricePerNight = 250.00m,
                            PublicId = new Guid("21a19247-04d8-4487-bd01-5b4cb03adee2"),
                            RoomSizeSquareMeters = 50,
                            Title = "Luxury Suite"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomFeature", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("RoomsFeatures");

                    b.HasData(
                        new
                        {
                            RoomId = 3,
                            FeatureId = 6
                        },
                        new
                        {
                            RoomId = 3,
                            FeatureId = 5
                        },
                        new
                        {
                            RoomId = 5,
                            FeatureId = 1
                        },
                        new
                        {
                            RoomId = 5,
                            FeatureId = 2
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImageUrls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            PublicId = new Guid("07d483af-0a92-4f9c-b46d-f7aff60a3e41"),
                            RoomId = 3,
                            Url = "https://img.freepik.com/free-photo/luxury-classic-modern-bedroom-suite-hotel_105762-1787.jpg?size=626&ext=jpg&ga=GA1.1.2008272138.1712707200&semt=ais"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            PublicId = new Guid("cfd01ba0-3970-4772-bbdd-17d9d2b7c03f"),
                            RoomId = 3,
                            Url = "https://images.trvl-media.com/lodging/96000000/95770000/95768000/95767989/5674f5e3.jpg?impolicy=resizecrop&rw=1200&ra=fit"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            PublicId = new Guid("a5edde04-c59f-4084-ac97-15d8ce0643fb"),
                            RoomId = 5,
                            Url = "https://st.depositphotos.com/1007581/1700/i/600/depositphotos_17000573-stock-photo-mountain-resort-house.jpg"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            PublicId = new Guid("c46eaec1-5455-4ec4-9484-4d1f4991f032"),
                            RoomId = 5,
                            Url = "https://whiteface.com/wp-content/uploads/sites/3/2023/08/Cobble-Mountain-Lodge-Cabin-Interior-768x511-1.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Manager", "Manager")
                        .WithMany("Hotels")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelFacility", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Facility", "Facility")
                        .WithMany("HotelsFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelsFacilities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelImageUrl", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Review", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("HotBooking.Data.Models.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomFeature", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Feature", "Feature")
                        .WithMany("RoomsFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("RoomsFeatures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomImageUrl", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotBooking.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Facility", b =>
                {
                    b.Navigation("HotelsFacilities");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Feature", b =>
                {
                    b.Navigation("RoomsFeatures");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("HotelImages");

                    b.Navigation("HotelsFacilities");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomImages");

                    b.Navigation("RoomsFeatures");
                });
#pragma warning restore 612, 618
        }
    }
}
