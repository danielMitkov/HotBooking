// <auto-generated />
using System;
using HotBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotBooking.Data.Migrations
{
    [DbContext(typeof(HotBookingDbContext))]
    [Migration("20240327074311_DataSeeded")]
    partial class DataSeeded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotBooking.Data.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a378097f-afaf-475e-bdae-af4793d7bec1",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9BMQbbKHPJTNpjKEZomWfLPWCmC9uTvfPNZYicHFIUFZ3woNibMK4AatxUkbbx3g==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("01ad4d28-b18b-4dfe-8304-fd268f8e201e"),
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "045f2f7f-cac7-4e01-8053-c24769779445",
                            Email = "two@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "two@mail.com",
                            NormalizedUserName = "two@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7nPLR57t7D6J6BjxxiSminBUuMDQg4J5ifWSrY14sq8AJ7F15EmO6zJOlsujsF5A==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("639927bc-b78f-48d8-9394-9f88d96db5a6"),
                            TwoFactorEnabled = false,
                            UserName = "two@mail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16c6a7a9-d3b8-4ad2-9d3a-14b83e8730d1",
                            Email = "manager@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "manager@mail.com",
                            NormalizedUserName = "manager@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEEsH+ClzVWWQlT5hMJmHhppIgNIo+vNROr1Ls5yQav8kBKXVPIjVNVlk33T2+N+cdA==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("b10f8fda-63ae-4754-b0af-36649d48e1b8"),
                            TwoFactorEnabled = false,
                            UserName = "manager@mail.com"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdultsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdultsCount = 2,
                            CheckIn = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("b08ba484-87b0-4729-bb94-6601b41efb41"),
                            RoomId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdultsCount = 3,
                            CheckIn = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("5c2cff67-3a35-47f3-bb1d-f7857b43ccfe"),
                            RoomId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AdultsCount = 1,
                            CheckIn = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("23948e7a-1398-4853-aeb8-efb3730a57b1"),
                            RoomId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            AdultsCount = 4,
                            CheckIn = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("d6c008d1-f227-4168-8628-5301079c8fb1"),
                            RoomId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            AdultsCount = 2,
                            CheckIn = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("4246cd1a-5c81-4162-b79f-b0c13891a0f1"),
                            RoomId = 5,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SvgTag")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Spa",
                            PublicId = new Guid("f025f578-ab76-4791-afc7-95fd9885bcb8"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Parking",
                            PublicId = new Guid("f8eb22f4-570c-4320-9d7e-898a53ed4ab1"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Free WiFi",
                            PublicId = new Guid("d7849412-023b-4d7b-b539-e0cb3a8d0e13"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Restaurant",
                            PublicId = new Guid("5dd10fd2-2386-4f82-9232-eb0d4e8083a3"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Fitness center",
                            PublicId = new Guid("accbea50-b1a9-4b95-a759-2b873e29587b"),
                            SvgTag = ""
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SvgTag")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Features");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "London",
                            CountryName = "United Kingdom",
                            Description = "Less than a 5-minute walk from London Paddington Station and Hyde Park, this boutique hotel offers elegant rooms with free internet and satellite TV.",
                            HotelName = "The Chilworth London Paddington",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("4c8182b4-1024-4982-b747-4226c32b2526"),
                            StarRating = 5,
                            StreetAddress = "Westminster Borough"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Bansko",
                            CountryName = "Bulgaria",
                            Description = "Get your trip off to a great start with a stay at this property, which offers free Wi-Fi in all rooms. Conveniently situated in the Bansko part of Bansko, this property puts you close to attractions and interesting dining options. Rated with 5 stars, this high-quality property provides guests with access to massage, restaurant and hot tub on-site.",
                            HotelName = "Kempinski Hotel Grand Arena Bansko",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("e124b718-8e06-466f-9ad3-b3c709dac5a8"),
                            StarRating = 4,
                            StreetAddress = "#96 Pirin Street"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelFacility", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.HasKey("HotelId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("HotelsFacilities");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 2
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 1
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 5
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 2
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 4
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("HotelImageUrls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("900c8995-4f25-46bc-b49c-673b632fe70e"),
                            Url = "https://www.w3schools.com/html/pic_trulli.jpg"
                        },
                        new
                        {
                            Id = 2,
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("7315fef2-e31e-4eb0-a9e4-15cce6a1d6bb"),
                            Url = "https://pix8.agoda.net/hotelImages/182146/-1/112f1fa0f38baf10800569462deb46cd.jpg"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            PhoneNumber = "08812345678",
                            PublicId = new Guid("531c4d5b-dc33-4908-8453-a5935185a6fa"),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RatingScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingId = 1,
                            Comment = "I love this product! It's exactly what I needed.",
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("e92bd9db-55d5-4aa8-9284-94f0e0eee7f6"),
                            RatingScore = 5,
                            ReviewedOn = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Excellent Product",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingId = 2,
                            Comment = "The product was okay, but could be better.",
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("d9e45511-61f6-4dbf-b2eb-8f8715c6526d"),
                            RatingScore = 3,
                            ReviewedOn = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Average Experience",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookingId = 3,
                            Comment = "I was very disappointed with this product.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("013fd383-4696-41b9-9138-68f198e255f1"),
                            RatingScore = 1,
                            ReviewedOn = new DateTime(2023, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Poor Quality",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookingId = 4,
                            Comment = "I got my money's worth with this product.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("814ca1ff-80de-4ff7-b964-70942ae9b748"),
                            RatingScore = 4,
                            ReviewedOn = new DateTime(2023, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Good Value",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookingId = 5,
                            Comment = "This product is amazing! Highly recommended.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("e792368f-be0e-47f8-bc31-8be75011a959"),
                            RatingScore = 5,
                            ReviewedOn = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Best Product Ever",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedsCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomSizeSquareMeters")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BedsCount = 2,
                            Description = "A comfortable room for a relaxing stay.",
                            HotelId = 1,
                            IsActive = true,
                            PricePerNight = 75.50m,
                            PublicId = new Guid("2b859437-b1b4-4ffc-8ca2-1a1ce19a24c1"),
                            RoomSizeSquareMeters = 25,
                            Title = "Cozy Retreat"
                        },
                        new
                        {
                            Id = 2,
                            BedsCount = 1,
                            Description = "Luxurious suite with modern amenities.",
                            HotelId = 1,
                            IsActive = true,
                            PricePerNight = 120.75m,
                            PublicId = new Guid("6a68b40f-c538-43b6-bcfa-179e3e1e1b2f"),
                            RoomSizeSquareMeters = 40,
                            Title = "Executive Suite"
                        },
                        new
                        {
                            Id = 3,
                            BedsCount = 3,
                            Description = "Spacious room suitable for families.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 95.25m,
                            PublicId = new Guid("a31ed7c2-aa0a-49f3-aafb-4d1de4b55ee1"),
                            RoomSizeSquareMeters = 35,
                            Title = "Family Getaway"
                        },
                        new
                        {
                            Id = 4,
                            BedsCount = 1,
                            Description = "Enjoy breathtaking views of the ocean.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 110.00m,
                            PublicId = new Guid("cef829ab-ce12-48df-95a5-a562a7f7a14f"),
                            RoomSizeSquareMeters = 30,
                            Title = "Ocean View Paradise"
                        },
                        new
                        {
                            Id = 5,
                            BedsCount = 2,
                            Description = "Escape to a cozy lodge in the mountains.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 85.80m,
                            PublicId = new Guid("e3676883-75fb-4173-9c49-a3268447443f"),
                            RoomSizeSquareMeters = 28,
                            Title = "Mountain Lodge"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomFeature", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("RoomsFeatures");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImageUrls");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithOne("Booking")
                        .HasForeignKey("HotBooking.Data.Models.Booking", "RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Manager", "Manager")
                        .WithMany("Hotels")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelFacility", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Facility", "Facility")
                        .WithMany("HotelsFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelsFacilities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelImageUrl", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Review", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("HotBooking.Data.Models.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomFeature", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Feature", "Feature")
                        .WithMany("RoomsFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("RoomsFeatures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomImageUrl", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotBooking.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Facility", b =>
                {
                    b.Navigation("HotelsFacilities");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Feature", b =>
                {
                    b.Navigation("RoomsFeatures");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("HotelImages");

                    b.Navigation("HotelsFacilities");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("RoomImages");

                    b.Navigation("RoomsFeatures");
                });
#pragma warning restore 612, 618
        }
    }
}
