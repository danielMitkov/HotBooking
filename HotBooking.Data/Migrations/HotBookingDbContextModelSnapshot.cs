// <auto-generated />
using System;
using HotBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotBooking.Data.Migrations
{
    [DbContext(typeof(HotBookingDbContext))]
    partial class HotBookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotBooking.Data.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2dbc401f-3534-48f0-9935-26186ab4a8e2",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBwdWIrkc0VeUVYy8z1dX0JwrvCT3YKOMo55pRrvRheBu6SHv5wg4D2wvGtaBSZtaw==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("1d1d65f8-045b-42f0-8250-84b3e99a52bf"),
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b613347-29f4-442d-9e80-3ebaceeafded",
                            Email = "two@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "two@mail.com",
                            NormalizedUserName = "two@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGJL3xT3HbpqL7UP6j5PS0B4kgh0T3ZM1HhsaR9tQnbry6QW8VmsUeRO7cjI8Yzs5g==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("a7a7ef8a-b7a8-4666-8531-1a055549a966"),
                            TwoFactorEnabled = false,
                            UserName = "two@mail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57774020-d008-45ac-87e8-86940ac3a6d2",
                            Email = "manager@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "manager@mail.com",
                            NormalizedUserName = "manager@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFcxYcRWDTfCKjJoetsUURHMqKPWNRr3n5UowONTdDo09o6dvRPvV0ZzN+lRsVAwuA==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("3257d0d3-0edc-48b9-a6b8-14abbf63b911"),
                            TwoFactorEnabled = false,
                            UserName = "manager@mail.com"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdultsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdultsCount = 2,
                            CheckIn = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("56310414-420a-48ba-abf1-2b47729eca70"),
                            RoomId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdultsCount = 3,
                            CheckIn = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("1563c027-e405-4cc1-89ec-e72ddc5725dc"),
                            RoomId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AdultsCount = 1,
                            CheckIn = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("2498284a-2835-4009-96ae-152becb5cf43"),
                            RoomId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            AdultsCount = 4,
                            CheckIn = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("6ceb67a5-ce24-429d-abb7-69670ba96c5c"),
                            RoomId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            AdultsCount = 2,
                            CheckIn = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("536ad6d2-af47-42c2-8891-26b0da9dd599"),
                            RoomId = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            AdultsCount = 3,
                            CheckIn = new DateTime(2023, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 3,
                            IsActive = true,
                            PublicId = new Guid("a1e4c88c-a92c-4138-8ec9-b37fac319e73"),
                            RoomId = 6,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SvgTag")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Spa",
                            PublicId = new Guid("758cfaee-4fb0-4168-bf3d-2ea25be57b98"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Parking",
                            PublicId = new Guid("c9b9ca82-db23-4b4a-898f-f7711c3ea90a"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "WiFi",
                            PublicId = new Guid("0f4edc7f-a1bf-4425-b9f0-93a2cc023876"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Restaurant",
                            PublicId = new Guid("bb6fcb42-3cfe-46c2-80c4-388038fce88d"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Fitness",
                            PublicId = new Guid("769a1864-5e7c-49c9-8a84-b23bd5050659"),
                            SvgTag = ""
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SvgTag")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Features");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "London",
                            CountryName = "United Kingdom",
                            Description = "Less than a 5-minute walk from London Paddington Station and Hyde Park, this boutique hotel offers elegant rooms with free internet and satellite TV.",
                            HotelName = "The Chilworth London Paddington",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("85c2b324-8da1-4993-b556-7a526cba8d4e"),
                            StarRating = 5,
                            StreetAddress = "Westminster Borough"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Bansko",
                            CountryName = "Bulgaria",
                            Description = "Get your trip off to a great start with a stay at this property, which offers free Wi-Fi in all rooms. Conveniently situated in the Bansko part of Bansko, this property puts you close to attractions and interesting dining options. Rated with 5 stars, this high-quality property provides guests with access to massage, restaurant and hot tub on-site.",
                            HotelName = "Kempinski Hotel Grand Arena Bansko",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("69b9111a-0709-4c3d-8efb-aca1152c25ca"),
                            StarRating = 4,
                            StreetAddress = "#96 Pirin Street"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "London",
                            CountryName = "United Kingdom",
                            Description = "Welcoming guests since 1909, the Strand Palace Hotel is located in London’s West End within just 2297 feet of the Adelphi and the Vaudeville theaters.",
                            HotelName = "Strand Palace Hotel",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("3233d5b7-5624-404d-a581-0bd5d0d86ea6"),
                            StarRating = 4,
                            StreetAddress = "Westminster Borough"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelFacility", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.HasKey("HotelId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("HotelsFacilities");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 2
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 1
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 5
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 2
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 4
                        },
                        new
                        {
                            HotelId = 3,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 3,
                            FacilityId = 2
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("HotelImageUrls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("2fc03ead-386c-4ef1-8912-f3aa1f0d289e"),
                            Url = "https://www.w3schools.com/html/pic_trulli.jpg"
                        },
                        new
                        {
                            Id = 2,
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("b4b542de-b4ae-4f2a-ba7a-e03b1d3e6750"),
                            Url = "https://pix8.agoda.net/hotelImages/182146/-1/112f1fa0f38baf10800569462deb46cd.jpg"
                        },
                        new
                        {
                            Id = 3,
                            HotelId = 3,
                            IsActive = true,
                            PublicId = new Guid("c7966147-fa29-4128-9ec6-69b1370eca73"),
                            Url = "https://cf.bstatic.com/xdata/images/hotel/max1024x768/260560238.jpg?k=1d14eb111d6a58d373d4139792c8c0545ec7014527bab0c00a98945e8df46879&o=&hp=1"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            PhoneNumber = "08812345678",
                            PublicId = new Guid("a1bb9592-1b0d-43bc-81ca-05e770e7db8a"),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RatingScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingId = 1,
                            Comment = "I love this product! It's exactly what I needed.",
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("dab5b49a-f5fd-4044-ab52-c5d24fd63b0e"),
                            RatingScore = 5m,
                            ReviewedOn = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Excellent Product",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingId = 2,
                            Comment = "The product was okay, but could be better.",
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("272c24c0-c8f4-4c4f-ba14-77dd6a50fae4"),
                            RatingScore = 3m,
                            ReviewedOn = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Average Experience",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookingId = 3,
                            Comment = "I was very disappointed with this product.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("2c2ffa58-fa6b-4f98-a9f2-c84653c1a051"),
                            RatingScore = 1m,
                            ReviewedOn = new DateTime(2023, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Poor Quality",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookingId = 4,
                            Comment = "I got my money's worth with this product.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("aa083d76-3bad-467e-8284-a8518195eb62"),
                            RatingScore = 4m,
                            ReviewedOn = new DateTime(2023, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Good Value",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookingId = 5,
                            Comment = "This product is amazing! Highly recommended.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("555d43d3-0aab-4aa5-a48a-444e3c220ac9"),
                            RatingScore = 5m,
                            ReviewedOn = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Best Product Ever",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            BookingId = 6,
                            Comment = "Great room and service overall!",
                            HotelId = 3,
                            IsActive = true,
                            PublicId = new Guid("26df34f5-5f71-4817-9d2b-20d2dfe1b29b"),
                            RatingScore = 4.5m,
                            ReviewedOn = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Satisfactory",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedsCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomSizeSquareMeters")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BedsCount = 2,
                            Description = "A comfortable room for a relaxing stay.",
                            HotelId = 1,
                            IsActive = true,
                            PricePerNight = 75.50m,
                            PublicId = new Guid("a4b7f3c0-509a-4322-9f7b-ad27f2542b61"),
                            RoomSizeSquareMeters = 25,
                            Title = "Cozy Retreat"
                        },
                        new
                        {
                            Id = 2,
                            BedsCount = 1,
                            Description = "Luxurious suite with modern amenities.",
                            HotelId = 1,
                            IsActive = true,
                            PricePerNight = 120.75m,
                            PublicId = new Guid("ad9fc692-b274-4062-82a4-4f7f8838ae50"),
                            RoomSizeSquareMeters = 40,
                            Title = "Executive Suite"
                        },
                        new
                        {
                            Id = 3,
                            BedsCount = 3,
                            Description = "Spacious room suitable for families.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 95.25m,
                            PublicId = new Guid("ea28e856-c46d-420c-a232-0ee5f965bef1"),
                            RoomSizeSquareMeters = 35,
                            Title = "Family Getaway"
                        },
                        new
                        {
                            Id = 4,
                            BedsCount = 1,
                            Description = "Enjoy breathtaking views of the ocean.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 110.00m,
                            PublicId = new Guid("b5f60b6d-17ab-45c9-a451-2a1c615662ee"),
                            RoomSizeSquareMeters = 30,
                            Title = "Ocean View Paradise"
                        },
                        new
                        {
                            Id = 5,
                            BedsCount = 2,
                            Description = "Escape to a cozy lodge in the mountains.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 85.80m,
                            PublicId = new Guid("73bcad48-004d-4b11-aaca-16fcb93fe35e"),
                            RoomSizeSquareMeters = 28,
                            Title = "Mountain Lodge"
                        },
                        new
                        {
                            Id = 6,
                            BedsCount = 3,
                            Description = "Luxurious room with a panoramic view.",
                            HotelId = 3,
                            IsActive = true,
                            PricePerNight = 250.00m,
                            PublicId = new Guid("c0bf47ac-d9a9-45a5-9853-470866cd585f"),
                            RoomSizeSquareMeters = 50,
                            Title = "Luxury Suite"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomFeature", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("RoomsFeatures");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImageUrls");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Manager", "Manager")
                        .WithMany("Hotels")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelFacility", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Facility", "Facility")
                        .WithMany("HotelsFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelsFacilities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelImageUrl", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Review", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("HotBooking.Data.Models.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomFeature", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Feature", "Feature")
                        .WithMany("RoomsFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("RoomsFeatures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomImageUrl", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotBooking.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Facility", b =>
                {
                    b.Navigation("HotelsFacilities");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Feature", b =>
                {
                    b.Navigation("RoomsFeatures");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("HotelImages");

                    b.Navigation("HotelsFacilities");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomImages");

                    b.Navigation("RoomsFeatures");
                });
#pragma warning restore 612, 618
        }
    }
}
