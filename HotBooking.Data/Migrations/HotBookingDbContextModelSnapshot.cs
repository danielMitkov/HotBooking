// <auto-generated />
using System;
using HotBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotBooking.Data.Migrations
{
    [DbContext(typeof(HotBookingDbContext))]
    partial class HotBookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotBooking.Data.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4488552-841e-403f-b0cc-432e0e292b12",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAod8TrKak0JJ1cVrQhbGLu9vSgm9HLrGyS72oEIH84swizY1atsDvdF3RcL6cKEPA==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("6b23da43-28b9-4dfc-9c09-89f26b3c6640"),
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03d86d16-0412-4fe6-81f3-e227ceaf833a",
                            Email = "two@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "two@mail.com",
                            NormalizedUserName = "two@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGZSy7OjOZWNOEOOIz089QxEGjfaBf+TOysDP4lFOuh6pQ2MFuzm8tcQRq/ZQ1wIug==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("85729309-3282-4a37-9418-ac66f79438a9"),
                            TwoFactorEnabled = false,
                            UserName = "two@mail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5eaa98ab-9faa-44f2-a257-b40599dad359",
                            Email = "manager@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "manager@mail.com",
                            NormalizedUserName = "manager@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKzIyla79aDAs3qVC8DukrkxftKd1Neam/nzHYvC5G4H0UV7KzfL5TTh4ohO8IlNAQ==",
                            PhoneNumberConfirmed = false,
                            PublicId = new Guid("62602a62-7cfa-4a9a-941c-b607d75abf94"),
                            TwoFactorEnabled = false,
                            UserName = "manager@mail.com"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdultsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdultsCount = 2,
                            CheckIn = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("4f04cbcb-ef30-48e8-a8c9-a1248950892e"),
                            RoomId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdultsCount = 3,
                            CheckIn = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("c2d750dd-0402-4087-b3b8-412a76d8f288"),
                            RoomId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AdultsCount = 1,
                            CheckIn = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("0f296b04-97af-4f23-89f0-436102c5bfe1"),
                            RoomId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            AdultsCount = 4,
                            CheckIn = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("157d11f6-af68-478f-8021-495eeee2aa48"),
                            RoomId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            AdultsCount = 2,
                            CheckIn = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("dc7eadcb-6c7c-46f7-ab37-3ed87c0992ab"),
                            RoomId = 5,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SvgTag")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Spa",
                            PublicId = new Guid("80bfdacc-16ff-4d0a-ab15-7ea794a1e6bd"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Parking",
                            PublicId = new Guid("199ddfe3-46ac-40cc-8d9b-49565afa7093"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Free WiFi",
                            PublicId = new Guid("12d4b6e1-7b94-448b-af09-454f5ba0c462"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Restaurant",
                            PublicId = new Guid("dd076dec-a8c1-4584-b469-91d0ffccc08a"),
                            SvgTag = ""
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Fitness center",
                            PublicId = new Guid("9fd8adf9-f2ad-49ac-a6e0-5efb7b8db415"),
                            SvgTag = ""
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SvgTag")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Features");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "London",
                            CountryName = "United Kingdom",
                            Description = "Less than a 5-minute walk from London Paddington Station and Hyde Park, this boutique hotel offers elegant rooms with free internet and satellite TV.",
                            HotelName = "The Chilworth London Paddington",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("dc5685cc-a693-495c-a974-fb0160f25673"),
                            StarRating = 5,
                            StreetAddress = "Westminster Borough"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Bansko",
                            CountryName = "Bulgaria",
                            Description = "Get your trip off to a great start with a stay at this property, which offers free Wi-Fi in all rooms. Conveniently situated in the Bansko part of Bansko, this property puts you close to attractions and interesting dining options. Rated with 5 stars, this high-quality property provides guests with access to massage, restaurant and hot tub on-site.",
                            HotelName = "Kempinski Hotel Grand Arena Bansko",
                            IsActive = true,
                            ManagerId = 1,
                            PublicId = new Guid("11c67a1d-6a42-44c5-a1f8-163b176dddbe"),
                            StarRating = 4,
                            StreetAddress = "#96 Pirin Street"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelFacility", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.HasKey("HotelId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("HotelsFacilities");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 2
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 1
                        },
                        new
                        {
                            HotelId = 1,
                            FacilityId = 5
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 3
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 2
                        },
                        new
                        {
                            HotelId = 2,
                            FacilityId = 4
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("HotelImageUrls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("f3dd830b-4940-4ba6-9f94-d4a19f39c6fb"),
                            Url = "https://www.w3schools.com/html/pic_trulli.jpg"
                        },
                        new
                        {
                            Id = 2,
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("fc5b023e-e045-438f-947b-e4f70abe3c05"),
                            Url = "https://pix8.agoda.net/hotelImages/182146/-1/112f1fa0f38baf10800569462deb46cd.jpg"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            PhoneNumber = "08812345678",
                            PublicId = new Guid("16007b51-7199-4f46-84be-27887fa370e9"),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RatingScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingId = 1,
                            Comment = "I love this product! It's exactly what I needed.",
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("c8cf135a-805f-4e5d-86cd-a89b236774a8"),
                            RatingScore = 5,
                            ReviewedOn = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Excellent Product",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingId = 2,
                            Comment = "The product was okay, but could be better.",
                            HotelId = 1,
                            IsActive = true,
                            PublicId = new Guid("ee5be9f0-8ffc-4b39-bfaa-fe554f7964ac"),
                            RatingScore = 3,
                            ReviewedOn = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Average Experience",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookingId = 3,
                            Comment = "I was very disappointed with this product.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("0bbdb695-0a9f-4da7-bc3c-952384a5f211"),
                            RatingScore = 1,
                            ReviewedOn = new DateTime(2023, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Poor Quality",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookingId = 4,
                            Comment = "I got my money's worth with this product.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("0367f0e9-5ed5-4f13-8e05-cff2dffd0e6e"),
                            RatingScore = 4,
                            ReviewedOn = new DateTime(2023, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Good Value",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookingId = 5,
                            Comment = "This product is amazing! Highly recommended.",
                            HotelId = 2,
                            IsActive = true,
                            PublicId = new Guid("468922de-d65c-40c9-8108-2bca5146987f"),
                            RatingScore = 5,
                            ReviewedOn = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Best Product Ever",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedsCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomSizeSquareMeters")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BedsCount = 2,
                            Description = "A comfortable room for a relaxing stay.",
                            HotelId = 1,
                            IsActive = true,
                            PricePerNight = 75.50m,
                            PublicId = new Guid("cf95da99-1297-4786-b40c-8a98b00ab29d"),
                            RoomSizeSquareMeters = 25,
                            Title = "Cozy Retreat"
                        },
                        new
                        {
                            Id = 2,
                            BedsCount = 1,
                            Description = "Luxurious suite with modern amenities.",
                            HotelId = 1,
                            IsActive = true,
                            PricePerNight = 120.75m,
                            PublicId = new Guid("33c0929c-ae02-4994-8493-1fc463b7dde6"),
                            RoomSizeSquareMeters = 40,
                            Title = "Executive Suite"
                        },
                        new
                        {
                            Id = 3,
                            BedsCount = 3,
                            Description = "Spacious room suitable for families.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 95.25m,
                            PublicId = new Guid("65d00f27-ce36-4b1c-b32a-1cc8f1fbfacb"),
                            RoomSizeSquareMeters = 35,
                            Title = "Family Getaway"
                        },
                        new
                        {
                            Id = 4,
                            BedsCount = 1,
                            Description = "Enjoy breathtaking views of the ocean.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 110.00m,
                            PublicId = new Guid("69e3965d-dbb3-4d4e-ba61-8225a0ddbd56"),
                            RoomSizeSquareMeters = 30,
                            Title = "Ocean View Paradise"
                        },
                        new
                        {
                            Id = 5,
                            BedsCount = 2,
                            Description = "Escape to a cozy lodge in the mountains.",
                            HotelId = 2,
                            IsActive = true,
                            PricePerNight = 85.80m,
                            PublicId = new Guid("1972260a-39ea-4a6c-a654-14bd55eae14d"),
                            RoomSizeSquareMeters = 28,
                            Title = "Mountain Lodge"
                        });
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomFeature", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("RoomsFeatures");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImageUrls");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Manager", "Manager")
                        .WithMany("Hotels")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelFacility", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Facility", "Facility")
                        .WithMany("HotelsFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelsFacilities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.HotelImageUrl", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Review", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("HotBooking.Data.Models.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomFeature", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Feature", "Feature")
                        .WithMany("RoomsFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("RoomsFeatures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotBooking.Data.Models.RoomImageUrl", b =>
                {
                    b.HasOne("HotBooking.Data.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HotBooking.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotBooking.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Booking", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Facility", b =>
                {
                    b.Navigation("HotelsFacilities");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Feature", b =>
                {
                    b.Navigation("RoomsFeatures");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("HotelImages");

                    b.Navigation("HotelsFacilities");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Manager", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("HotBooking.Data.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomImages");

                    b.Navigation("RoomsFeatures");
                });
#pragma warning restore 612, 618
        }
    }
}
